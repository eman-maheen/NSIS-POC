name: Frontend Build

on:
  push:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-build.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-build.yml'

defaults:
  run:
    shell: cmd

env:
  SOURCE_DIR: ${{ github.workspace }}/frontend
  BUILD_DIR: ${{ runner.temp }}\build
  QT_VERSION: 6.8.1
  BUILD_TYPE: Release
  INSTALLER_BASE_NAME: TestProgram-Setup

jobs:
  build:
    if: "contains(github.event.head_commit.message, '[frontend-build]')"
    runs-on: windows-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ env.QT_VERSION }}
          host: windows
          target: desktop
          arch: win64_msvc2022_64
          dir: ${{ runner.temp }}
          setup-python: false

      - name: Setup Visual Studio Environment
        uses: microsoft/setup-msbuild@v1.1
        with:
          vs-version: '17.0'

      - name: Configure CMake
        run: |
          mkdir -p ${{ env.BUILD_DIR }}
          cd ${{ env.BUILD_DIR }}
          cmake ${{ env.SOURCE_DIR }} -G "Visual Studio 17 2022" -A x64 ^
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} ^
          -DCMAKE_PREFIX_PATH=${{ env.Qt6_DIR }}

      - name: Build
        working-directory: ${{ env.BUILD_DIR }}
        run: cmake --build . --config ${{ env.BUILD_TYPE }}

      - name: Create Deploy Directory
        run: mkdir -p ${{ env.SOURCE_DIR }}\deploy\bin

      - name: Deploy Qt Dependencies
        working-directory: ${{ env.BUILD_DIR }}\${{ env.BUILD_TYPE }}
        run: |
          copy test-project.exe ${{ env.SOURCE_DIR }}\deploy\bin\
          windeployqt ${{ env.SOURCE_DIR }}\deploy\bin\test-project.exe --release --compiler-runtime
          curl -L -o "${{ env.SOURCE_DIR }}\deploy\VC_redist.x64.exe" "https://aka.ms/vs/17/release/vc_redist.x64.exe"

      - name: Install NSIS
        run: choco install nsis -y

      - name: Create Installer
        run: makensis.exe ${{ env.SOURCE_DIR }}\deploy\nsis\installer.nsi

      - name: Upload Installer
        uses: actions/upload-artifact@v4
        with:
          name: TestProgram-Setup
          path: ${{ env.SOURCE_DIR }}\deploy\TestProgram-Setup.exe

  release:
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: windows-latest
    permissions:
      contents: write
    
    steps:
      - name: Download Installer Artifact
        uses: actions/download-artifact@v4
        with:
          name: TestProgram-Setup
          path: ./installer

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: latest
          name: Latest Release
          files: |
            ./installer/TestProgram-Setup.exe
          body: |
            This is the latest build of the application.
            Download this if you want the most recent version.